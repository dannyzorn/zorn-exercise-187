//AUTHOR:[Danny Zorn]
//COURSE:[CPT 187]
//PURPOSE:[Program for tracking SodNotZod sales data. Users can log in with unique username and password and load an inventory files and creates orders. 
//Program displays order receipts in an order report and reports totals orders for the day in final report.] 
//STARTDATE:[07-12-2020]

package edu.cpt187.zorn.participation6;

import java.util.Scanner;

public class MainClass 
{
	//Class constants
	public static 	final String[] MAIN_MENU_OPTIONS		= 	{"Login", "Create an Account", "Quit"};
	public static 	final String[] FILE_MENU_OPTIONS		= 	{"Load Inventory","Create Order", "Return"};
	public static 	final String[] MENU_CHARS				=	{"[A] for", "[B] for", "[Q] for"};
	public static 	final String[] FILE_MENU_CHARS			=	{"[A] for", "[B] for", "[R] for"};
	public static 	final String[] SUB_MENU_CHARS			=	{"[A] for", "[B] for", "[C] for"};
	public static 	final String   MASTER_ACCOUNTS_NAME		=	"MasterUserFile.dat";	
	public static 	final String   MASTER_FILE_NAME			=	"MasterOrderFile.dat";	
	
	//start of main method
	public static void main(String[] args) 
	{
		//object instances
		Scanner		input				=	new	Scanner(System.in);	//input Scanner instance
		SodOrder 	mySodOrder			=	new	SodOrder();
		Inventory	currentInventory	=	new	Inventory();
		UserAccounts	currentUser		=	new	UserAccounts(MASTER_ACCOUNTS_NAME);
		OrderWriter sodOrders			=	new	OrderWriter(MASTER_FILE_NAME);
		
		//Declare Variables
		final	int NOT_FOUND		=	-1;
		final	int	ZERO			=	0;
		String 		userName		=	"";
		String		userPassword	=	"";
		char 		menuSelection	=	' ';
		
		//BEGIN program flow~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//display welcome banner
		displayWelcomeBanner();
		
		//get a value for menuSelection
		menuSelection	=	validateMainMenu(input);
		
		//begin run while menuSelection != 'Q'
		while (menuSelection != 'Q')
		{	
			//load user accounts
			currentUser.setUserAccountArrays();
			
			//log in
			if (menuSelection == 'A')
			{
				//display login user banner
				displayLogInUser();
				//get userName
				userName		=	getUserName(input);

				currentUser.setSearchedIndex(userName);
				
				userPassword	=	getUserPW(input);
				
				//start user index eval
				if (currentUser.getSearchedIndex() < ZERO)
				{
					//DONT MOVE ON. no user name found so no password can match. COULD have used a "user not found" message. going with this for now
					displayUserNameNotMatch();
				}
				//MOVE ON with FOUND userName
				else
				{
					//check if pw matches username
					if(!currentUser.getPasswordMatch(userPassword) )
					{
						//password and user name did NOT match
						displayUserNameNotMatch();
					}
					else
					{
						//password and user name DID match
						//get file name
						menuSelection = validateFileMenu(input);
						
						//begin runwhile NOT 'R'
						while (menuSelection != 'R')
						{
							//start sub menu menuSelection 'A' (LOAD ITEMS)
							if(menuSelection == 'A')
							{
								//load inventory
								currentInventory.setLoadItems(getFileName(input));
								
								if(currentInventory.getRecordCount() <= ZERO)
								{
									//file not found message
									displayNotOpen();
								}
								else
								{
									//display number of records found
									displayRecordCount(currentInventory.getRecordCount());
								}
							}
							//end sub menu menuSelection 'A'(LOAD ITEMS)
							
							//start sub menu menuSelection 'B' (CREATE ORDER)
							else
							{
								//start inventory record count eval
								if(currentInventory.getRecordCount() <= ZERO)
								{
									//file not found message
									displayNoInventoryLoaded();
								}
								else
								{
									//set searched index
									currentInventory.setSearchIdx(validateSearchIdx(input));
								
									//check if file found
									if (currentInventory.getItemSearchIdx() < 0)
									{
										//display file not found error
										displayNotFound();
									}
									else
									{
										//file found set item id, name, price, and howmany
										//set the index for the item name, id, and price
										mySodOrder.setLastItemSelectedIdx(currentInventory.getItemSearchIdx());
										//set item id with file from current inventory
										mySodOrder.setItemID(currentInventory.getItemIDs());
										//set item id with file from current inventory
										mySodOrder.setItemName(currentInventory.getItemNames());
										//set item id with file from current inventory
										mySodOrder.setItemPrice(currentInventory.getItemPrices());
										//set item id with file from current inventory
										mySodOrder.setHowMany(validateHowMany(input));
										
										//check if selection in stock or not
										if ( (mySodOrder.getInStockCount(currentInventory.getInStockCounts())) < (mySodOrder.getHowmany()) )
										{
											//selection out of stock
											displayOutOfStock();
										}
										else
										{
											//item IS in stock
											//set discount type, name, and rate. decrease stock by howMany and generate random prize
											//set discount type
											mySodOrder.setDiscountType(validateDiscountMenu(input,currentInventory.getDiscountNames(),currentInventory.getDiscountRates()));
											//set discount name
											mySodOrder.setDiscountName(currentInventory.getDiscountNames());
											//set discount rate
											mySodOrder.setDiscountRate(currentInventory.getDiscountRates());
											//decrease stock by howMany
											mySodOrder.setDecreaseStock(currentInventory);
											//generate random prize
											mySodOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
											
											//write to masterOrderFile
											sodOrders.setWriteOrder(mySodOrder.getItemID(),mySodOrder.getItemName(),
																	mySodOrder.getDiscountPrice(),mySodOrder.getHowmany(),
																	mySodOrder.getTotalCost() );
											
											//check for errors
											if(!sodOrders.getFileFoundFlag())
											{
												//file was not found. error
												displayNotFound();
											}
											else
											{
												//check if discount rate set or not
												if ( mySodOrder.getDiscountRate() > 0.0)
												{
													//display receipt with discount
													displayItemReceipt( userName, mySodOrder.getItemName(),mySodOrder.getItemPrice(),
															mySodOrder.getHowmany(),mySodOrder.getDiscountName(),
															mySodOrder.getDiscountRate(),mySodOrder.getDiscountAmt(),
															mySodOrder.getDiscountPrice(),mySodOrder.getSubTotal(),
															mySodOrder.getTaxRate(),mySodOrder.getTaxAmt(),
															mySodOrder.getTotalCost(),mySodOrder.getPrizeName(),
															mySodOrder.getInStockCount(currentInventory.getInStockCounts()));
									
												}
												else
												{
													//display receipt no discount 
													displayItemReceipt( userName, mySodOrder.getItemName(),mySodOrder.getItemPrice(),
																		mySodOrder.getHowmany(),mySodOrder.getSubTotal(),
																		mySodOrder.getTaxRate(),mySodOrder.getTaxAmt(),
																		mySodOrder.getTotalCost(),mySodOrder.getPrizeName(),
																		mySodOrder.getInStockCount(currentInventory.getInStockCounts()));
												}//end check if discount rate set or not
												
											}//end check for errors	
											
										}//end check if selection in stock or not
										
									}//end check if file found
									
								}//end inventory record count eval
								
							}//END sub menu menuSelection 'B' (CREATE ORDER)
							
							//update lcv
							menuSelection = validateFileMenu(input);
							
						}//end runwhile NOT 'R'
						
					}//end check if pw matches username
					
				}//end MOVE ON with FOUND userName/user index eval
	
			}//end of menuSelection == A (LOG IN USER)
			
			
			//start of menuSelection == B (create user account)
			else
			{
				//display create user banner
				displayCreateUser();
				
				//get user credentials
				userName		=	getUserName(input);
				userPassword	=	getUserPW(input);
				
				//check if credentials already in file
				currentUser.setSearchedIndex(userName, userPassword);
				
				//user already exists if searchedIndex is not = NOT_FOUND (-1)
				if (currentUser.getSearchedIndex()!= NOT_FOUND)
				{
					//error message
					displayUserAlreadyExists(userName);
				}
				else
				{
					//create a user account
					currentUser.setWriteOneRecord(userName, userPassword);	
					
					//user account creation confirmation
					displayUserCreatedSuccessfully();
				}//end user already exists if searchedIndex is not = NOT_FOUND (-1)
				
			}//end of menuSelection == B (create user account)
			
			//update lcv
			menuSelection	=	validateMainMenu(input);
			
		}//end run while menuSelection != 'Q'
		
		//if NEW records have been added
		if (sodOrders.getRecordCount() > 0)
		{
			//over write field arrays with data from master file
			currentInventory.setLoadItems(sodOrders.getFileName(), sodOrders.getRecordCount());
			
			//check for errors
			if (currentInventory.getRecordCount()  == NOT_FOUND)
			{
				//error message
				displayNotFound();
			}
			else
			{
				//need accumulated totals of all items and sum of all items, number of records counted,
				displayFinalReport(  userName, currentInventory.getItemIDs(), currentInventory.getItemNames(),
														currentInventory.getItemPrices(),currentInventory.getOrderQuantities(),
														currentInventory.getOrderTotals(),currentInventory.getRecordCount(),
														currentInventory.getGrandTotal(),currentInventory.getDiscountNames(),
														mySodOrder.getDiscountCounts(),currentInventory.getPrizeNames(),mySodOrder.getPrizeCounts());
			}//end check for errors
		
		}//end if NEW records have been added comparison
		//display farewell
		displayFarewellMessage();
		//close input scanner
		input.close();
	}//end program flow~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//end main method
	
	//VOID method
	//this method displays the item menu
	public static void displayCreateUser()
	{	
		//display item menu banner
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("CREATE NEW USER");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}

	//VOID method
	//this method displays the item menu
	public static void displayLogInUser()
	{	
		//display item menu banner
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("USER LOG IN");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}	
	
	//VOID method
	//this method displays the item menu
	public static void displayDiscountMenu(String[] displayDiscountNames, double[] borrowedDiscountRates)
	{	
		//local vars
		int	localIdx	=	0;
		//display item menu banner
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("DISCOUNT MENU");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		
		while (localIdx < displayDiscountNames.length)
		{
			System.out.printf("%-8s%-14s%4.1f%1s\r",SUB_MENU_CHARS[localIdx],displayDiscountNames[localIdx],borrowedDiscountRates[localIdx]*100,"%");
			localIdx++;
		}
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Please make a selection.");
	}
	
	//VOID method
	//this method displays a farewell message in columnar-style
	public static void displayFarewellMessage()
	{	
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%s\r","Thank you for visiting SodNotZod");
		System.out.println("Have a great day!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}

	//VOID method
	//this method displays accumulated totals of all items and sum of all items combined,
	//number of records counted, number of each discount and prize counted
	public static void displayFinalReport(  String borrowedUserName, int[] borrowedIDs, String[] borrowedItemNames,
											double[] borrowedItemPrices,int[] borrowedOrderQuantities, double[] borrowedTotals,
											int recordCount,double borrowedGrandTotal, String[] borrowedDiscountNames,
											int[] borrowedDiscountCounts,String[] borrowedPrizeNames, int[] borrowedPrizeCounts )
	{
		//declare and init local vars
		int localItemIdx		=	0;
		int localDiscountIdx	=	0;
		int localPrizeIdx		=	0;
		
		//display final report
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		
		//print user name
		System.out.printf("%-29s%s\n\n","Employee Name:",borrowedUserName);
		
		//print title format for next while loop
		System.out.printf("%-9s%-20s%-12s%-7s%-9s\n","ID","NAME","PRICE","QTY","TOTAL");
		//print all 3 ID#'s, names, prices, counts, and totals
		while (localItemIdx < recordCount)
		{
			System.out.printf("%-9d%-20s%1s%7.2f%7d\t%1s%7.2f\n",borrowedIDs[localItemIdx],borrowedItemNames[localItemIdx],
								"$",borrowedItemPrices[localItemIdx],borrowedOrderQuantities[localItemIdx],
								"$",borrowedTotals[localItemIdx]);
			localItemIdx++;
		}
		System.out.println("");

		//print record count and orders grand total
		System.out.printf("%-29s%-20s\n","RECORD COUNT","GRAND TOTAL");
		System.out.printf("%-29d%s%8.2f\n\n",recordCount,"$",borrowedGrandTotal);
		
		//print all 3 discount names and counts	
		while (localDiscountIdx < borrowedDiscountNames.length)
		{
			System.out.printf("%-24s%1s\t%d\n", borrowedDiscountNames[localDiscountIdx],":",borrowedDiscountCounts[localDiscountIdx]);
			localDiscountIdx++;
		}
		System.out.println("");
		
		//print all 3 prize names and counts	
		while (localPrizeIdx < borrowedPrizeNames.length)
		{
			System.out.printf("%-38s%s\t%d\n", borrowedPrizeNames[localPrizeIdx],":",borrowedPrizeCounts[localPrizeIdx]);
			localPrizeIdx++;
		}				
	}//end of displayFinalReport
		
	//VOID method
	//this method displays a prompt asking users how many they'd like to purchase
	public static void displayHowManyPrompt()
	{	
		//display prompt
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("Please enter how many you would like to purchase\n");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}
	
	//VOID method
	//this method displays an item receipt following order completion WITH discount parameters
	public static void displayItemReceipt( String borrowedUserName,String borrowedItemName,double borrowedItemPrice,int borrowedHowmany,
			String borrowedDiscountName,double borrowedDiscountRate,double borrowedDiscountAmt,
			double borrowedDiscountPrice,double borrowedSubTotal,double borrowedTaxRate,
			double borrowedTaxAmt,double borrowedTotalCost,String borrowedPrizeName, int borrowedInStockCount)
	{	
		//display prompt
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%s%s\n",borrowedUserName,"'s ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		
		System.out.printf("\n%-25s%s", "Item Name:", borrowedItemName);
		System.out.printf("\n%-25s%1s%8.2f\n", "Item Price:", "$",borrowedItemPrice);
		
		System.out.printf("\n%-25s%s", "Discount Name:", borrowedDiscountName);
		System.out.printf("\n%-25s%8.1f%s", "Discount Rate:", borrowedDiscountRate*100," %");
		System.out.printf("\n%-25s%1s%8.2f", "Discount Amount:", "$",borrowedDiscountAmt);
		System.out.printf("\n%-25s%1s%8.2f\n", "Discount Price:", "$",borrowedDiscountPrice);
		
		System.out.printf("\n%-30s%d\n", "Quantity:", borrowedHowmany);
		
		System.out.printf("\n%-25s%1s%8.2f", "Subtotal:","$", borrowedSubTotal);
		System.out.printf("\n%-25s%8.1f%s", "Tax Rate:",borrowedTaxRate*100, " %");
		System.out.printf("\n%-25s%1s%8.2f\n", "Tax Amount:", "$",borrowedTaxAmt);
		
		System.out.printf("\n%-25s%1s%8.2f\n", "Order Total:", "$",borrowedTotalCost);
		
		System.out.printf("\n%-25s%s\n\n", "Prize:",borrowedPrizeName);	
		System.out.println(borrowedInStockCount + " more units of " + borrowedItemName + " left in-stock!");	
	}

	//VOID method
	//this method displays an item receipt following order completion WITHOUT discount parameters
	public static void displayItemReceipt(  String borrowedUserName, String borrowedItemName,double borrowedItemPrice,int borrowedHowmany,
											double borrowedSubTotal,double borrowedTaxRate,
											double borrowedTaxAmt,double borrowedTotalCost,String borrowedPrizeName,
											int borrowedInStockCount)
	{	
		//display prompt
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%s%s\n",borrowedUserName,"'s ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		
		System.out.printf("%-25s%s", "Item Name:", borrowedItemName);
		System.out.printf("\n%-25s%1s%8.2f\n", "Item Price:", "$",borrowedItemPrice);

		System.out.printf("\n%-30s%d\n", "Quantity:", borrowedHowmany);
		
		System.out.printf("\n%-25s%1s%8.2f", "Subtotal:","$", borrowedSubTotal);
		System.out.printf("\n%-25s%8.1f%s", "Tax Rate:",borrowedTaxRate*100, " %");
		System.out.printf("\n%-25s%1s%8.2f\n", "Tax Amount:", "$",borrowedTaxAmt);
		
		System.out.printf("\n%-25s%1s%8.2f\n", "Order Total:", "$",borrowedTotalCost);
		
		System.out.printf("\n%-25s%s\n\n", "Prize:",borrowedPrizeName);
		
		System.out.println(borrowedInStockCount + " more units of " + borrowedItemName + " left in-stock!");	
	}
	
	//VOID method
	//this method displays the file menu
	public static void displayFileMenuSelection()
	{	
		//local vars
		int	localIdx	=	0;
		//display main menu banner
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FILE MENU");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		
		//print all members of MENU_CHARS & MENU_OPTIONS arrays
		while (localIdx < SUB_MENU_CHARS.length)
		{
			System.out.printf("%-8s%s\r", FILE_MENU_CHARS[localIdx],FILE_MENU_OPTIONS[localIdx]);
			localIdx++;
		}
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Please make a selection.");
	}//end of displayMenuSelection

	//VOID method
	//this method displays the main menu
	public static void displayMenuSelection()
	{	
		//local vars
		int	localIdx	=	0;
		//display main menu banner
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("MAIN MENU");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		
		//print all members of MENU_CHARS & MENU_OPTIONS arrays
		while (localIdx < MENU_CHARS.length)
		{
			System.out.printf("%-8s%s\r", MENU_CHARS[localIdx],MAIN_MENU_OPTIONS[localIdx]);
			localIdx++;
		}
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Please make a selection.");
	}//end of displayMenuSelection
	
	//VOID method
	//this method displays NoInventoryLoaded
	public static void displayNoInventoryLoaded()
	{	
		//error message
		System.out.printf("\n%s\n","PLEASE LOAD AN INVENTORY FILE");
	}
	
	//VOID method
	//this method displays "displayNotFound"
	public static void displayNotFound()
	{	
		//error message
		System.out.printf("\n%s\n","ITEM NOT FOUND");
	}

	//VOID method
	//this method displays "not open message"
	public static void displayNotOpen()
	{	
		//error message
		System.out.printf("\n%s\n","FILE WAS NOT SUCCESSFULLY OPENED");
	}

	//VOID method
	//this method displays the item menu
	public static void displayOutOfStock()
	{	
		//error message
		System.out.printf("\n%s\n","WE DO NOT HAVE THE QUANITITY YOU REQUESTED FOR THAT ITEM");
	}
	
	//VOID method
	//this method displays a search prompt message	
	public static void displayRecordCount(int borrowedRecordCount)
	{	
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");	
		System.out.printf("%4d%s\n",borrowedRecordCount," item records found");
	}
	
	//VOID method
	//this method displays a search prompt message	
	public static void displaySearchPrompt()
	{	
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");	
		System.out.println("Please enter the item ID you are searching for");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");	
	}
	
	//VOID method
	//this method displays a user name and password mismatch	
	public static void displayUserCreatedSuccessfully()
	{	
		//error message
		System.out.printf("\n%s\n","NEW USER CREATED");
	}
	
	//VOID method
	//this method displays a user name and password mismatch	
	public static void displayUserNameNotMatch()
	{	
		//error message
		System.out.printf("\n%s\n","USERNAME AND PASSWORD DO NOT MATCH");
	}
	
	//VOID method
	//this method displays a displayUserAlreadyExists message	
	public static void displayUserAlreadyExists(String borrowedUserName)
	{	
		//error message
		System.out.printf("\n%s%s%s\n","USERNAME '", borrowedUserName, "' ALREADY EXISTS");
	}
	
	//VOID method
	//this method displays a welcome message in columnar-style
	public static void displayWelcomeBanner()
	{	
		//display welcome banner
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("SodNotZod Sales Tracker Software");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");	
		System.out.println("FEATURES:");
		System.out.println("* Load up to 50 different User's. Each w/ unique passwords!");
		System.out.println("* Load inventory from record files and search via ID#'s");
		System.out.println("* Store sales data to MasterOrderFile.dat"); 
		System.out.println("* Also free prize give-aways with every purchase!!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");	
		System.out.println("NOTE: MasterOrderFile.dat must be removed from project ");
		System.out.println("folder at the end of each day.");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");	
	}
	
	//BEGIN VAL return methods
	//RETURN VAL method
	//this method displays a prompt for user to input file name
	public static String getFileName(Scanner borrowedInput)
	{	
		//local vars
		String	localFileName	=	"";
		//diplay prompt
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Please enter the inventory file name");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");
	
		localFileName	=	borrowedInput.next();
		//ret localUserName
		return localFileName;
	}
	
	//RETURN VAL method
	//this method displays a prompt for user to input name
	public static String getUserName(Scanner borrowedInput)
	{	
		//local vars
		String	localUserName	=	"";
		//prompt user for input
		System.out.println("Enter your USERNAME");
		localUserName	=	borrowedInput.next().toUpperCase();
		//ret localUserName
		return localUserName;
	}
	
	//RETURN VAL method
	//this method displays a prompt for user to input name
	public static String getUserPW(Scanner borrowedInput)
	{	
		//local vars
		String	localUserName	=	"";
		//prompt user for input
		System.out.println("Enter your case sensitive PASSWORD");
		localUserName	=	borrowedInput.next();
		//ret localUserName
		return localUserName;
	}

	//RETURN VAL method
	//validation method
	//this method prompts user and validates input forDiscountMenu
	public static char validateDiscountMenu(Scanner borrowedInput,String[] borrowedDiscountNames,
											  double[] borrowedDiscountRates)
	{	//local vars
		char localChar	=	' ';
		// display the main menu
		displayDiscountMenu(borrowedDiscountNames,borrowedDiscountRates);
		localChar	=	borrowedInput.next().toUpperCase().charAt(0);
		
		//validate
		while ( (localChar != 'A') & (localChar != 'B') & (localChar != 'C') )
		{
			//error message
			System.out.printf("\n%s\n%s\n","Invalid Entry","Please make a valid selection");
			// display the main menu
			displayDiscountMenu(borrowedDiscountNames,borrowedDiscountRates);
			//update LCV
			localChar	=	borrowedInput.next().toUpperCase().charAt(0);
		}
		return localChar;
	}

	//RETURN VAL method
	//validation method
	//this method prompts user and validates input for HowMany
	public static int validateHowMany(Scanner borrowedInput)
	{	
		//local var
		int 	localInt	=	0;
		
		// display the main menu
		displayHowManyPrompt();
		//get user input
		localInt	=	borrowedInput.nextInt();
		//validate
		while (localInt <= 0 )
		{
			//error message
			System.out.printf("%s\n%s\n","Invalid Entry","Please make a valid selection");
			// display the main menu
			displayHowManyPrompt();
			//update LCV
			localInt	=	borrowedInput.nextInt();
		}
		//return localString
		return localInt;
	}
	
	//RETURN VAL method
	//validation method
	//this method prompts user and validates input for main menu selection
	public static char validateMainMenu(Scanner borrowedInput)
	{	
		//local vars
		char localChar	=	' ';
		// display the main menu
		displayMenuSelection();
		localChar	=	borrowedInput.next().toUpperCase().charAt(0);
		
		//validate
		while ( (localChar != 'A') & (localChar != 'B') & (localChar != 'Q') )
		{
			//error message
			System.out.printf("\n%s\n%s\n","Invalid Entry","Please make a valid selection");
			// display the main menu
			displayMenuSelection();
			//update LCV
			localChar	=	borrowedInput.next().toUpperCase().charAt(0);
		}
		//ret localChar
		return localChar;
	}

	//RETURN VAL method
	//validation method
	//this method prompts user and validates input for FileMenu
	public static char validateFileMenu(Scanner borrowedInput)
	{	
		//local vars
		char localChar	=	' ';
		// display the main menu
		displayFileMenuSelection();
		localChar	=	borrowedInput.next().toUpperCase().charAt(0);
		
		//validate
		while ( (localChar != 'A') & (localChar != 'B') & (localChar != 'R') )
		{
			//error message
			System.out.printf("\n%s\n%s\n","Invalid Entry","Please make a valid selection");
			// display the main menu
			displayFileMenuSelection();
			//update LCV
			localChar	=	borrowedInput.next().toUpperCase().charAt(0);
		}
		//ret localChar
		return localChar;
	}

	//RETURN VAL method
	//validation method
	//this method prompts user and validates input for SearchIdx
	public static int validateSearchIdx(Scanner borrowedInput)
	{	
		//local var
		int localInt	=	0;
		
		// display the main menu
		displaySearchPrompt();
		//get user input
		localInt	=	borrowedInput.nextInt();
		//validate
		while (localInt <= 0 )
		{
			//error message
			System.out.printf("%s\n%s\n","Invalid Entry","Please enter a valid ID");
			// display the main menu
			displaySearchPrompt();
			//update LCV
			localInt	=	borrowedInput.nextInt();
		}
		//return localString
		return localInt;
	}
}
//end MainClass
